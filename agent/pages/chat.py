import streamlit as st
import requests
import os
# import json

# from dotenv import load_dotenv
# from datetime import datetime

# dotenv_path = os.path.join(os.path.dirname(__file__), '../../.env')
# load_dotenv(dotenv_path)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
# API_KEY = "sk-as43lzhdKPBZ7icPoDr6rKTSJi86iRdVVHKL_V8iMT0"
API_KEY = os.getenv("API_KEY")
API_URL = "http://localhost:7860/api/v1/run/54925a2b-8469-4b28-8a85-34d75a8470cd"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤  
headers = {
    "Content-Type": "application/json",
    "x-api-key": API_KEY
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(message):
    payload = {
        "output_type": "chat",
        "input_type": "chat",
        "input_value": message
    }
    
    try:
        response = requests.post(API_URL, json=payload, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ API: {str(e)}")
        return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
def process_response(response):
    try:
        if response and "outputs" in response:
            for output in response["outputs"]:
                if "outputs" in output:
                    for msg in output["outputs"]:
                        if "results" in msg:
                            return msg["results"]["message"]["text"]
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç API"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Streamlit
st.title("ü§ñ TATLIN NEURO")
st.caption("–ß–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∞—à–µ–≥–æ LangFlow API")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
if "messages" not in st.session_state:
    st.session_state.messages = []

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    with st.spinner("–ê–≥–µ–Ω—Ç –¥—É–º–∞–µ—Ç..."):
        response = send_message(prompt)
        full_response = process_response(response)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if full_response:
        st.session_state.messages.append({"role": "assistant", "content": full_response})
        with st.chat_message("assistant"):
            st.markdown(full_response)